// <auto-generated />
using System;
using CircleConnect.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CircleConnect.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240820195054_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CircleConnect.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(6898),
                            Description = "General technology ideas",
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(6900),
                            Description = "Blockchain knowledge and ideas",
                            Name = "Blockchain"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(6900),
                            Description = "Bussiness ideas to investors",
                            Name = "Bussiness"
                        });
                });

            modelBuilder.Entity("CircleConnect.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IsPrivate")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Communities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(6999),
                            Description = "A community for technology enthusiasts to discuss the latest trends.",
                            IsPrivate = 0,
                            Location = "San Francisco",
                            Name = "Tech Enthusiasts"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7000),
                            Description = "A group of book lovers sharing and discussing their favorite books.",
                            IsPrivate = 1,
                            Location = "New York",
                            Name = "Book Club"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7001),
                            Description = "A community for people passionate about fitness and a healthy lifestyle.",
                            IsPrivate = 0,
                            Location = "Los Angeles",
                            Name = "Fitness and Health"
                        });
                });

            modelBuilder.Entity("CircleConnect.Models.CommunityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommunityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommunityId");

                    b.ToTable("CommunityCategories");
                });

            modelBuilder.Entity("CircleConnect.Models.CommunityParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isCreator")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("JoinedCommunities");
                });

            modelBuilder.Entity("CircleConnect.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommunityId = 3,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7096),
                            Date = new DateTime(2024, 9, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An event for tech enthusiasts to network and share knowledge.",
                            Location = "Tech Park, Room 302",
                            Name = "Tech Community Meetup",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CommunityId = 1,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7101),
                            Date = new DateTime(2024, 10, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A hands-on workshop on AI and Machine Learning trends.",
                            Location = "Innovation Hub, Room 210",
                            Name = "AI and Machine Learning Workshop",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CommunityId = 2,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7102),
                            Date = new DateTime(2024, 11, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A platform for startups to pitch their ideas to investors.",
                            Location = "Business Center, Main Hall",
                            Name = "Startup Pitch Day",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("CircleConnect.Models.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("CircleConnect.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommunityId = 2,
                            Content = "Hi, i am Kagan!",
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7202),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CommunityId = 1,
                            Content = "I am a Junior Software Developer.",
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7203),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CommunityId = 3,
                            Content = "I am passionate about technologies and love to learn new things.",
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7204),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("CircleConnect.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Ankara Techno Meeting",
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7298),
                            IsRead = true,
                            Type = "Meeting",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Sabanci Event",
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7300),
                            IsRead = true,
                            Type = "Event",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Content = "Book Worms Istanbul",
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(7345),
                            IsRead = false,
                            Type = "Event",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("CircleConnect.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(6662),
                            Email = "hako12@circle.com",
                            Password = "a58f45g88jf85",
                            Username = "hako12"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(6665),
                            Email = "fako15@circle.com",
                            Password = "b58f45g88jf85",
                            Username = "fako15"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 20, 19, 50, 53, 637, DateTimeKind.Utc).AddTicks(6665),
                            Email = "cako22@circle.com",
                            Password = "c58f45g88jf85",
                            Username = "cako22"
                        });
                });

            modelBuilder.Entity("CircleConnect.Models.CommunityCategory", b =>
                {
                    b.HasOne("CircleConnect.Models.Category", "Category")
                        .WithMany("CommunityCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CircleConnect.Models.Community", "Community")
                        .WithMany("CommunityCategories")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Community");
                });

            modelBuilder.Entity("CircleConnect.Models.CommunityParticipant", b =>
                {
                    b.HasOne("CircleConnect.Models.Community", "Community")
                        .WithMany("JoinedCommunities")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CircleConnect.Models.User", "User")
                        .WithMany("JoinedCommunities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CircleConnect.Models.Event", b =>
                {
                    b.HasOne("CircleConnect.Models.Community", "Community")
                        .WithMany("Events")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CircleConnect.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CircleConnect.Models.EventParticipant", b =>
                {
                    b.HasOne("CircleConnect.Models.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CircleConnect.Models.User", "User")
                        .WithMany("EventParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CircleConnect.Models.Message", b =>
                {
                    b.HasOne("CircleConnect.Models.Community", "Community")
                        .WithMany("Messages")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CircleConnect.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CircleConnect.Models.Notification", b =>
                {
                    b.HasOne("CircleConnect.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CircleConnect.Models.Category", b =>
                {
                    b.Navigation("CommunityCategories");
                });

            modelBuilder.Entity("CircleConnect.Models.Community", b =>
                {
                    b.Navigation("CommunityCategories");

                    b.Navigation("Events");

                    b.Navigation("JoinedCommunities");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("CircleConnect.Models.Event", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("CircleConnect.Models.User", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("JoinedCommunities");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
